/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GitGutterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_child_process = require("child_process");
var import_view = require("@codemirror/view");
var import_obsidian = require("obsidian");
var GitDiffGutterMarker = class extends import_view.GutterMarker {
  constructor(types) {
    super();
    this.types = types;
  }
  toDOM() {
    const marker = document.createElement("div");
    this.types.forEach((type) => {
      marker.classList.add(`git-gutter-marker-${type}`);
    });
    marker.classList.add("git-gutter-marker");
    return marker;
  }
  eq(other) {
    return this.types.every((type) => other.types.includes(type));
  }
};
var GitGutterPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    //@ts-ignore
    this.vaultPath = this.app.vault.adapter.basePath;
    this.cachedDiffs = {};
  }
  getDiffsForFile(filePath) {
    var _a;
    return (_a = this.cachedDiffs[filePath]) != null ? _a : { added: [], modified: [], deleted: [] };
  }
  setDiffsForFile(filePath, changes) {
    this.cachedDiffs[filePath] = changes;
  }
  createGutterMarker(types) {
    return new GitDiffGutterMarker(types);
  }
  gitGutterExtension() {
    return (0, import_view.gutter)({
      lineMarker: (view, line) => {
        var _a;
        const info = view.state.field(import_obsidian.editorInfoField);
        const filePath = (_a = info.file) == null ? void 0 : _a.path;
        const diffs = this.getDiffsForFile(filePath != null ? filePath : "");
        const lineNumber = view.state.doc.lineAt(line.from).number;
        const types = [];
        if (diffs.added.includes(lineNumber)) types.push("added");
        if (diffs.modified.includes(lineNumber)) types.push("modified");
        if (diffs.deleted.includes(lineNumber)) types.push("deleted");
        return types.length > 0 ? this.createGutterMarker(types) : null;
      },
      lineMarkerChange: (update) => {
        var _a;
        if (update.docChanged) {
          const info = update.view.state.field(import_obsidian.editorInfoField);
          const filePath = (_a = info.file) == null ? void 0 : _a.path;
          if (filePath) {
            const diffs = this.getGitDiff(filePath);
            if (diffs) {
              this.setDiffsForFile(filePath, diffs);
              return true;
            }
          }
        }
        return false;
      }
    });
  }
  async onload() {
    this.registerEditorExtension(this.gitGutterExtension());
  }
  getGitDiff(fileAbsPath) {
    try {
      const gitDiffOutput = (0, import_child_process.execSync)(`git diff --unified=0 --no-color ${fileAbsPath}`, {
        cwd: this.vaultPath
      });
      const diffLines = gitDiffOutput.toString().split("\n");
      return this.parseDiffNotation(diffLines);
    } catch (error) {
      console.error("Error getting git diff:", error.message);
      return null;
    }
  }
  parseDiffNotation(diffLines) {
    const result = {
      added: [],
      deleted: [],
      modified: []
    };
    for (const line of diffLines) {
      const matches = line.match(/^@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/);
      if (!matches) continue;
      const oldStart = parseInt(matches[1]);
      const oldLength = matches[2] ? parseInt(matches[2]) : 1;
      const newStart = parseInt(matches[3]);
      const newLength = matches[4] ? parseInt(matches[4]) : 1;
      if (newLength === 0) {
        for (let i = 0; i < oldLength; i++) {
          result.deleted.push(oldStart + i);
        }
        continue;
      }
      if (oldLength === 0) {
        for (let i = 0; i < newLength; i++) {
          result.added.push(newStart + i);
        }
        continue;
      }
      const modifiedStart = Math.max(oldStart, newStart);
      const modifiedEnd = Math.min(oldStart + oldLength, newStart + newLength);
      for (let i = modifiedStart; i < modifiedEnd; i++) {
        result.modified.push(i);
      }
      if (newLength > oldLength) {
        for (let i = oldLength; i < newLength; i++) {
          result.added.push(newStart + i);
        }
      }
    }
    result.added = [...new Set(result.added)].sort((a, b) => a - b);
    result.deleted = [...new Set(result.deleted)].sort((a, b) => a - b);
    result.modified = [...new Set(result.modified)].sort((a, b) => a - b);
    return result;
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
